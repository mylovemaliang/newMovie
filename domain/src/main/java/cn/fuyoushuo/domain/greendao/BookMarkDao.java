package cn.fuyoushuo.domain.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.fuyoushuo.domain.entity.BookMark;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_MARK".
*/
public class BookMarkDao extends AbstractDao<BookMark, Long> {

    public static final String TABLENAME = "BOOK_MARK";

    /**
     * Properties of entity BookMark.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MarkName = new Property(1, String.class, "markName", false, "MARK_NAME");
        public final static Property MarkUrl = new Property(2, String.class, "markUrl", false, "MARK_URL");
        public final static Property CreateTime = new Property(3, java.util.Date.class, "createTime", false, "CREATE_TIME");
    }


    public BookMarkDao(DaoConfig config) {
        super(config);
    }
    
    public BookMarkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_MARK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MARK_NAME\" TEXT," + // 1: markName
                "\"MARK_URL\" TEXT," + // 2: markUrl
                "\"CREATE_TIME\" INTEGER);"); // 3: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_MARK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookMark entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(2, markName);
        }
 
        String markUrl = entity.getMarkUrl();
        if (markUrl != null) {
            stmt.bindString(3, markUrl);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookMark entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(2, markName);
        }
 
        String markUrl = entity.getMarkUrl();
        if (markUrl != null) {
            stmt.bindString(3, markUrl);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookMark readEntity(Cursor cursor, int offset) {
        BookMark entity = new BookMark( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // markName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // markUrl
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookMark entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMarkName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMarkUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookMark entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookMark entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookMark entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
