package cn.fuyoushuo.domain.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.fuyoushuo.domain.entity.UserTrack;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_TRACK".
*/
public class UserTrackDao extends AbstractDao<UserTrack, Long> {

    public static final String TABLENAME = "USER_TRACK";

    /**
     * Properties of entity UserTrack.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TrackName = new Property(1, String.class, "trackName", false, "TRACK_NAME");
        public final static Property TrackUrl = new Property(2, String.class, "trackUrl", false, "TRACK_URL");
        public final static Property Md5Url = new Property(3, String.class, "md5Url", false, "MD5_URL");
        public final static Property CreateTime = new Property(4, java.util.Date.class, "createTime", false, "CREATE_TIME");
    }


    public UserTrackDao(DaoConfig config) {
        super(config);
    }
    
    public UserTrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_TRACK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRACK_NAME\" TEXT," + // 1: trackName
                "\"TRACK_URL\" TEXT," + // 2: trackUrl
                "\"MD5_URL\" TEXT," + // 3: md5Url
                "\"CREATE_TIME\" INTEGER);"); // 4: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_TRACK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserTrack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trackName = entity.getTrackName();
        if (trackName != null) {
            stmt.bindString(2, trackName);
        }
 
        String trackUrl = entity.getTrackUrl();
        if (trackUrl != null) {
            stmt.bindString(3, trackUrl);
        }
 
        String md5Url = entity.getMd5Url();
        if (md5Url != null) {
            stmt.bindString(4, md5Url);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserTrack entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trackName = entity.getTrackName();
        if (trackName != null) {
            stmt.bindString(2, trackName);
        }
 
        String trackUrl = entity.getTrackUrl();
        if (trackUrl != null) {
            stmt.bindString(3, trackUrl);
        }
 
        String md5Url = entity.getMd5Url();
        if (md5Url != null) {
            stmt.bindString(4, md5Url);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(5, createTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserTrack readEntity(Cursor cursor, int offset) {
        UserTrack entity = new UserTrack( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trackName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // trackUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // md5Url
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserTrack entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrackName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTrackUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMd5Url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserTrack entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserTrack entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserTrack entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
